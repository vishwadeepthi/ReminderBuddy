<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport"
        content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible"
        content="ie=edge">
    <title>Reminder Buddy</title>
    <% include ./partials/header.ejs %>
</head>
<style>
    .recording {
        color: red;
    }

    .record-btn {
        color: green;
    }

    .rbctn {
        display: flex;
        justify-content: center;
        flex-direction: column;
        align-items: center;
    }
</style>

<body>

    <div class="ui container center">

        <div class="rbctn">
            <div class="column record-column">
                <i class="microphone icon large record-action record-btn"
                    id="recorder"
                    style="font-size : 15rem; cursor : pointer;"></i>
            </div>

            <i style="margin-top: 2rem; font-size: 2rem"> Hold to Record </i>
            <div style = "margin-top: 2rem;" class = "player"></div>

        </div>

    </div>


    <script>
        var recorderInst;
        $(".record-action").click(function () {
            if ($(this).hasClass("recording")) {
                try {
                    $(this).removeClass("recording").addClass("record-btn");
                    alert(recorderInst);
                    recorderInst.stop();
                }catch(e) {
                    alert(e.message);
                }
            } else {
                $(this).removeClass("record-btn").addClass("recording");
                try {
                    startRecording();
                }catch(e) {
                    alert(e.message);
                }

            }
        });


        function startRecording() {
            function createAudioElement(blobUrl) {
                const downloadEl = document.createElement('a');
                downloadEl.style = 'display: block';
                downloadEl.innerHTML = 'download';
                downloadEl.download = 'audio.webm';
                downloadEl.href = blobUrl;
                const audioEl = document.createElement('audio');
                audioEl.controls = true;
                const sourceEl = document.createElement('source');
                sourceEl.src = blobUrl;
                sourceEl.type = 'audio/webm';
                audioEl.appendChild(sourceEl);
                $(".player").html(audioEl)
                //document.body.appendChild(audioEl);
                //document.body.appendChild(downloadEl);
            }

            // request permission to access audio stream
            alert("Here we are ", navigator.mediaDevices.getUserMedia);
            navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
                // store streaming data chunks in array
                const chunks = [];
                // create media recorder instance to initialize recording
                alert('here', MediaRecorder);
                recorderInst = new MediaRecorder(stream);
                // function to be called when data is received
                alert('here 1', recorderInst);
                recorderInst.ondataavailable = e => {
                    // add stream data to chunks
                    chunks.push(e.data);
                    // if recorder is 'inactive' then recording has finished
                    if (recorderInst.state == 'inactive') {
                        // convert stream data chunks to a 'webm' audio format as a blob
                        const blob = new Blob(chunks, { type: 'audio/webm' });
                        // convert blob to URL so it can be assigned to a audio src attribute
                        createAudioElement(URL.createObjectURL(blob));
                    }
                };
                // start recording with 1 second time between receiving 'ondataavailable' events
                recorderInst.start(500);
                alert('recorder', recorder);
                // setTimeout to stop recording after 4 seconds
                // setTimeout(() => {
                //     // this will trigger one final 'ondataavailable' event and set recorder state to 'inactive'
                //     recorder.stop();
                // }, 5000);
            }).catch(console.error);
        }
    </script>


</body>

</html>